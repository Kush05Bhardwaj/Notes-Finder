{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst API = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? 'https://your-backend-url.com/api' : '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\nAPI.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => API.post('/auth/register', userData),\n  login: credentials => API.post('/auth/login', credentials),\n  getMe: () => API.get('/auth/me'),\n  updateProfile: profileData => API.put('/auth/profile', profileData),\n  changePassword: passwordData => API.put('/auth/change-password', passwordData),\n  forgotPassword: email => API.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: (token, password) => API.put(`/auth/reset-password/${token}`, {\n    password\n  }),\n  logout: () => API.post('/auth/logout')\n};\n\n// Notes API\nexport const notesAPI = {\n  getNotes: (params = {}) => API.get('/notes', {\n    params\n  }),\n  getNote: id => API.get(`/notes/${id}`),\n  createNote: noteData => API.post('/notes', noteData),\n  updateNote: (id, noteData) => API.put(`/notes/${id}`, noteData),\n  deleteNote: id => API.delete(`/notes/${id}`),\n  uploadFiles: (id, formData) => API.post(`/notes/${id}/upload`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  downloadFile: (noteId, fileId) => API.get(`/notes/${noteId}/download/${fileId}`, {\n    responseType: 'blob'\n  }),\n  rateNote: (id, ratingData) => API.post(`/notes/${id}/rate`, ratingData),\n  likeNote: id => API.post(`/notes/${id}/like`),\n  unlikeNote: id => API.delete(`/notes/${id}/like`),\n  addComment: (id, commentData) => API.post(`/notes/${id}/comments`, commentData),\n  updateComment: (noteId, commentId, commentData) => API.put(`/notes/${noteId}/comments/${commentId}`, commentData),\n  deleteComment: (noteId, commentId) => API.delete(`/notes/${noteId}/comments/${commentId}`),\n  addReply: (noteId, commentId, replyData) => API.post(`/notes/${noteId}/comments/${commentId}/replies`, replyData),\n  reportNote: (id, reportData) => API.post(`/notes/${id}/report`, reportData),\n  getFeaturedNotes: () => API.get('/notes/featured'),\n  getMyNotes: (params = {}) => API.get('/notes/user/my-notes', {\n    params\n  }),\n  searchNotes: (params = {}) => API.get('/notes/search', {\n    params\n  })\n};\n\n// Subjects API\nexport const subjectsAPI = {\n  getSubjects: (params = {}) => API.get('/subjects', {\n    params\n  }),\n  getSubject: id => API.get(`/subjects/${id}`),\n  createSubject: subjectData => API.post('/subjects', subjectData),\n  updateSubject: (id, subjectData) => API.put(`/subjects/${id}`, subjectData),\n  deleteSubject: id => API.delete(`/subjects/${id}`),\n  getSubjectNotes: (id, params = {}) => API.get(`/subjects/${id}/notes`, {\n    params\n  }),\n  searchSubjects: (params = {}) => API.get('/subjects/search', {\n    params\n  })\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: (params = {}) => API.get('/users', {\n    params\n  }),\n  getUser: id => API.get(`/users/${id}`),\n  updateUser: (id, userData) => API.put(`/users/${id}`, userData),\n  deleteUser: id => API.delete(`/users/${id}`),\n  getUserNotes: (id, params = {}) => API.get(`/users/${id}/notes`, {\n    params\n  }),\n  getUserStats: id => API.get(`/users/${id}/stats`),\n  followUser: id => API.post(`/users/${id}/follow`),\n  unfollowUser: id => API.delete(`/users/${id}/follow`),\n  getFollowers: id => API.get(`/users/${id}/followers`),\n  getFollowing: id => API.get(`/users/${id}/following`)\n};\n\n// Health check\nexport const healthAPI = {\n  check: () => API.get('/health')\n};\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","data","_error$response","_error$response2","status","removeItem","window","location","href","message","authAPI","register","userData","post","login","credentials","getMe","get","updateProfile","profileData","put","changePassword","passwordData","forgotPassword","email","resetPassword","password","logout","notesAPI","getNotes","params","getNote","id","createNote","noteData","updateNote","deleteNote","delete","uploadFiles","formData","downloadFile","noteId","fileId","responseType","rateNote","ratingData","likeNote","unlikeNote","addComment","commentData","updateComment","commentId","deleteComment","addReply","replyData","reportNote","reportData","getFeaturedNotes","getMyNotes","searchNotes","subjectsAPI","getSubjects","getSubject","createSubject","subjectData","updateSubject","deleteSubject","getSubjectNotes","searchSubjects","usersAPI","getUsers","getUser","updateUser","deleteUser","getUserNotes","getUserStats","followUser","unfollowUser","getFollowers","getFollowing","healthAPI","check"],"sources":["D:/Projects/Notes Finder/Notes-Finder/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst API = axios.create({\r\n  baseURL: process.env.NODE_ENV === 'production' \r\n    ? 'https://your-backend-url.com/api' \r\n    : '/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Request interceptor to add auth token\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\nAPI.interceptors.response.use(\r\n  (response) => {\r\n    return response.data;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error.response?.data || error.message);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => API.post('/auth/register', userData),\r\n  login: (credentials) => API.post('/auth/login', credentials),\r\n  getMe: () => API.get('/auth/me'),\r\n  updateProfile: (profileData) => API.put('/auth/profile', profileData),\r\n  changePassword: (passwordData) => API.put('/auth/change-password', passwordData),\r\n  forgotPassword: (email) => API.post('/auth/forgot-password', { email }),\r\n  resetPassword: (token, password) => API.put(`/auth/reset-password/${token}`, { password }),\r\n  logout: () => API.post('/auth/logout')\r\n};\r\n\r\n// Notes API\r\nexport const notesAPI = {\r\n  getNotes: (params = {}) => API.get('/notes', { params }),\r\n  getNote: (id) => API.get(`/notes/${id}`),\r\n  createNote: (noteData) => API.post('/notes', noteData),\r\n  updateNote: (id, noteData) => API.put(`/notes/${id}`, noteData),\r\n  deleteNote: (id) => API.delete(`/notes/${id}`),\r\n  uploadFiles: (id, formData) => API.post(`/notes/${id}/upload`, formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  }),\r\n  downloadFile: (noteId, fileId) => API.get(`/notes/${noteId}/download/${fileId}`, {\r\n    responseType: 'blob'\r\n  }),\r\n  rateNote: (id, ratingData) => API.post(`/notes/${id}/rate`, ratingData),\r\n  likeNote: (id) => API.post(`/notes/${id}/like`),\r\n  unlikeNote: (id) => API.delete(`/notes/${id}/like`),\r\n  addComment: (id, commentData) => API.post(`/notes/${id}/comments`, commentData),\r\n  updateComment: (noteId, commentId, commentData) => \r\n    API.put(`/notes/${noteId}/comments/${commentId}`, commentData),\r\n  deleteComment: (noteId, commentId) => API.delete(`/notes/${noteId}/comments/${commentId}`),\r\n  addReply: (noteId, commentId, replyData) => \r\n    API.post(`/notes/${noteId}/comments/${commentId}/replies`, replyData),\r\n  reportNote: (id, reportData) => API.post(`/notes/${id}/report`, reportData),\r\n  getFeaturedNotes: () => API.get('/notes/featured'),\r\n  getMyNotes: (params = {}) => API.get('/notes/user/my-notes', { params }),\r\n  searchNotes: (params = {}) => API.get('/notes/search', { params })\r\n};\r\n\r\n// Subjects API\r\nexport const subjectsAPI = {\r\n  getSubjects: (params = {}) => API.get('/subjects', { params }),\r\n  getSubject: (id) => API.get(`/subjects/${id}`),\r\n  createSubject: (subjectData) => API.post('/subjects', subjectData),\r\n  updateSubject: (id, subjectData) => API.put(`/subjects/${id}`, subjectData),\r\n  deleteSubject: (id) => API.delete(`/subjects/${id}`),\r\n  getSubjectNotes: (id, params = {}) => API.get(`/subjects/${id}/notes`, { params }),\r\n  searchSubjects: (params = {}) => API.get('/subjects/search', { params })\r\n};\r\n\r\n// Users API\r\nexport const usersAPI = {\r\n  getUsers: (params = {}) => API.get('/users', { params }),\r\n  getUser: (id) => API.get(`/users/${id}`),\r\n  updateUser: (id, userData) => API.put(`/users/${id}`, userData),\r\n  deleteUser: (id) => API.delete(`/users/${id}`),\r\n  getUserNotes: (id, params = {}) => API.get(`/users/${id}/notes`, { params }),\r\n  getUserStats: (id) => API.get(`/users/${id}/stats`),\r\n  followUser: (id) => API.post(`/users/${id}/follow`),\r\n  unfollowUser: (id) => API.delete(`/users/${id}/follow`),\r\n  getFollowers: (id) => API.get(`/users/${id}/followers`),\r\n  getFollowing: (id) => API.get(`/users/${id}/following`)\r\n};\r\n\r\n// Health check\r\nexport const healthAPI = {\r\n  check: () => API.get('/health')\r\n};\r\n\r\nexport default API;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}